name: 01-1. GitHub Actions Demo
on: 
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - main

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."
      - name: Adding markdown
        run: echo "### Hello world! :rocket:" >> "$GITHUB_STEP_SUMMARY"
      # This step uses GitHub's hello-world-javascript-action: https://github.com/actions/hello-world-javascript-action
      - name: Hello world
        uses: actions/hello-world-javascript-action@main
        with:
          who-to-greet: "Mona the Octocat"
        id: hello
      # This step prints an output (time) from the previous step's action.
      - name: Echo the greeting's time
        run: echo 'The time was ${{ steps.hello.outputs.time }}.'     

# The GitHub Actions workflow you provided includes two steps. Here is a detailed explanation of what each step does:

# ### Step 1: "Hello world"

# ```yaml
# - name: Hello world
#   uses: actions/hello-world-javascript-action@main
#   with:
#     who-to-greet: "Mona the Octocat"
#   id: hello
# ```

# This step uses a pre-built GitHub action called `hello-world-javascript-action`. Here's what each part of the step does:

# - `name: Hello world`: This gives the step a name, which is useful for identifying it in the workflow logs.
# - `uses: actions/hello-world-javascript-action@main`: This specifies the action to use. In this case, it is `hello-world-javascript-action` from the `actions` GitHub repository, and the version is specified as `main`.
# - `with`: This section passes inputs to the action.
#   - `who-to-greet: "Mona the Octocat"`: This specifies the input `who-to-greet` with the value `"Mona the Octocat"`. The action will use this value to perform its task.
# - `id: hello`: This gives the step an ID of `hello`, which can be used to reference the step in subsequent steps in the workflow.

# The `hello-world-javascript-action` is a simple action that takes an input (`who-to-greet`), logs a greeting message, and outputs the current time.

# ### Step 2: "Echo the greeting's time"

# ```yaml
# - name: Echo the greeting's time
#   run: echo 'The time was ${{ steps.hello.outputs.time }}.'
# ```

# This step runs a shell command to print the output from the previous step. Here's what each part does:

# - `name: Echo the greeting's time`: This gives the step a name.
# - `run: echo 'The time was ${{ steps.hello.outputs.time }}.'`: This specifies a command to run. The `echo` command prints a message to the console. The message includes the output `time` from the previous step, referenced as `${{ steps.hello.outputs.time }}`.

# The output `time` is produced by the `hello-world-javascript-action` and contains the current time when the action was executed.

# ### Summary

# 1. **Hello world step**: Uses the `hello-world-javascript-action` to greet "Mona the Octocat" and generates the current time as an output.
# 2. **Echo the greeting's time step**: Prints the time output from the previous step to the console.

# This workflow demonstrates how to use a simple GitHub action and how to pass and use outputs between steps.